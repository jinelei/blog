package cn.jinelei.rainbow.blog.exception.enumerate;

import org.springframework.http.HttpStatus;

import static cn.jinelei.rainbow.blog.constant.Constants.*;

/**
 * @author zhenlei
 */

public enum BlogExceptionEnum {

    /**
     * 基础错误码
     */
    BASE_ERROR(HttpStatus.BAD_REQUEST.value(), BASE_ERROR_STR, 900000, PARAM_PLACEHOLDER),
    INSERT_DATA_FAILED(HttpStatus.BAD_REQUEST.value(), INSERT_DATA_FAILED_STR, 900001, PARAM_PLACEHOLDER),
    UPDATE_DATA_FAILED(HttpStatus.BAD_REQUEST.value(), UPDATE_DATA_FAILED_STR, 900002, PARAM_PLACEHOLDER),
    DELETE_DATA_FAILED(HttpStatus.BAD_REQUEST.value(), DELETE_DATA_FAILED_STR, 900003, PARAM_PLACEHOLDER),
    QUERY_DATA_FAILED(HttpStatus.BAD_REQUEST.value(), QUERY_DATA_FAILED_STR, 900003, PARAM_PLACEHOLDER),
    DATA_NOT_FOUND(HttpStatus.NOT_FOUND.value(), NOT_FOUND_STR, 900004, PARAM_PLACEHOLDER),
    UPLOAD_IMAGE_FAILED(HttpStatus.BAD_REQUEST.value(), UPLOAD_IMAGE_FAILED_STR, 900005, PARAM_PLACEHOLDER),
    EMPTY_IMAGE(HttpStatus.BAD_REQUEST.value(), EMPTY_IMAGE_STR, 900006, PARAM_PLACEHOLDER),
    /**
     * 用户错误码
     */
    USER_ERROR(HttpStatus.BAD_REQUEST.value(), USER_ERROR_STR, 800000, PARAM_PLACEHOLDER),
    USERNAME_OR_PASSWORD_WRONG(HttpStatus.BAD_REQUEST.value(), USERNAME_OR_PASSWORD_WRONG_STR, 800010, PARAM_PLACEHOLDER),
    USER_NOT_LOGIN(HttpStatus.BAD_REQUEST.value(), UESR_NOT_LOGIN_STR, 800000, PARAM_PLACEHOLDER),
    EMAIL_ALREADY_EXIST(HttpStatus.BAD_REQUEST.value(), EMAIL_ALREADY_EXIST_STR, 800001, PARAM_PLACEHOLDER),
    PHONE_ALREADY_EXIST(HttpStatus.BAD_REQUEST.value(), PHONE_ALREADY_EXIST_STR, 800002, PARAM_PLACEHOLDER),
    USERNAME_NOT_UNIQUE(HttpStatus.BAD_REQUEST.value(), USERNAME_NOT_UNIQUE_STR, 800004, PARAM_PLACEHOLDER),
    UNAUTHORIZED(HttpStatus.BAD_REQUEST.value(), UNAUTHORIZED_STR, 800008, PARAM_PLACEHOLDER),
    USER_NOT_FOUND(HttpStatus.NOT_FOUND.value(), USER_NOT_FOUND_STR, 800016, PARAM_PLACEHOLDER),
    NEED_FIELD(HttpStatus.BAD_REQUEST.value(), NEED_FIELD_STR, 800064, PARAM_PLACEHOLDER),
    UNAUTHORIZED_USER(HttpStatus.BAD_REQUEST.value(), UNAUTHORIZED_USER_STR, 800128, PARAM_PLACEHOLDER),
    UNAUTHORIZED_GROUP(HttpStatus.BAD_REQUEST.value(), UNAUTHORIZED_GROUP_STR, 800256, PARAM_PLACEHOLDER),
    USER_LOGIN_SUCCESS(HttpStatus.OK.value(), USER_LOGIN_SUCCESS_STR, 800512, PARAM_PLACEHOLDER),
    USER_LOGIN_FAILED(HttpStatus.BAD_REQUEST.value(), USER_LOGIN_FAILED_STR, 801024, PARAM_PLACEHOLDER),
    USER_LOGOUT_SUCCESS(HttpStatus.OK.value(), USER_LOGOUT_SUCCESS_STR, 802048, PARAM_PLACEHOLDER),
    USER_LOGOUT_FAILED(HttpStatus.BAD_REQUEST.value(), USER_LOGOUT_FAILED_STR, 804096, PARAM_PLACEHOLDER),
    DELETE_USER_SUCCESS(HttpStatus.OK.value(), DELETE_USER_SUCCESS_STR, 808192, PARAM_PLACEHOLDER),
    DELETE_USER_FAILED(HttpStatus.BAD_REQUEST.value(), DELETE_USER_FAILED_STR, 816384, PARAM_PLACEHOLDER),
    /**
     * 标签错误码
     */
    TAG_ERROR(HttpStatus.BAD_REQUEST.value(), TAG_ERROR_STR, 700000, PARAM_PLACEHOLDER),
    TAG_NOT_FOUND(HttpStatus.NOT_FOUND.value(), TAG_NOT_FOUND_STR, 700000, PARAM_PLACEHOLDER),
    DELETE_TAG_SUCCESS(HttpStatus.OK.value(), DELETE_TAG_SUCCESS_STR, 700001, PARAM_PLACEHOLDER),
    DELETE_TAG_FAILED(HttpStatus.BAD_REQUEST.value(), DELETE_TAG_FAILED_STR, 700002, PARAM_PLACEHOLDER),
    TAG_ALREADY_EXIST(HttpStatus.BAD_REQUEST.value(), TAG_ALREADY_EXIST_STR, 700003, PARAM_PLACEHOLDER),
    /**
     * 分类错误码
     */
    CATEGORY_ERROR(HttpStatus.BAD_REQUEST.value(), CATEGORY_ERROR_STR, 400000, PARAM_PLACEHOLDER),
    CATEGORY_NOT_FOUND(HttpStatus.NOT_FOUND.value(), CATEGORY_NOT_FOUND_STR, 600000, PARAM_PLACEHOLDER),
    DELETE_CATEGORY_SUCCESS(HttpStatus.OK.value(), DELETE_CATEGORY_SUCCESS_STR, 600001, PARAM_PLACEHOLDER),
    DELETE_CATEGORY_FAILED(HttpStatus.BAD_REQUEST.value(), DELETE_CATEGORY_FAILED_STR, 600002, PARAM_PLACEHOLDER),
    CATEGORY_ALREADY_EXIST(HttpStatus.BAD_REQUEST.value(), CATEGORY_ALREADY_EXIST_STR, 600003, PARAM_PLACEHOLDER),
    /**
     * 评论错误码
     */
    COMMENT_ERROR(HttpStatus.BAD_REQUEST.value(), COMMENT_ERROR_STR, 500000, PARAM_PLACEHOLDER),
    COMMENT_NOT_FOUND(HttpStatus.NOT_FOUND.value(), COMMENT_NOT_FOUND_STR, 500000, PARAM_PLACEHOLDER),
    DELETE_COMMENT_SUCCESS(HttpStatus.OK.value(), DELETE_COMMENT_SUCCESS_STR, 500001, PARAM_PLACEHOLDER),
    DELETE_COMMENT_FAILED(HttpStatus.BAD_REQUEST.value(), DELETE_COMMENT_FAILED_STR, 500002, PARAM_PLACEHOLDER),
    COMMENT_ALREADY_EXIST(HttpStatus.BAD_REQUEST.value(), COMMENT_ALREADY_EXIST_STR, 500003, PARAM_PLACEHOLDER),
    /**
     * 文章错误码
     */
    ARTICLE_ERROR(HttpStatus.BAD_REQUEST.value(), ARTICLE_ERROR_STR, 400000, PARAM_PLACEHOLDER),
    ARTICLE_NOT_FOUND(HttpStatus.NOT_FOUND.value(), ARTICLE_NOT_FOUND_STR, 400000, PARAM_PLACEHOLDER),
    DELETE_ARTICLE_SUCCESS(HttpStatus.OK.value(), DELETE_ARTICLE_SUCCESS_STR, 400001, PARAM_PLACEHOLDER),
    DELETE_ARTICLE_FAILED(HttpStatus.BAD_REQUEST.value(), DELETE_ARTICLE_FAILED_STR, 400002, PARAM_PLACEHOLDER),
    ARTICLE_ALREADY_EXIST(HttpStatus.BAD_REQUEST.value(), ARTICLE_ALREADY_EXIST_STR, 400003, PARAM_PLACEHOLDER),
    /**
     * token错误码
     */
    TOKEN_ERROR(HttpStatus.BAD_REQUEST.value(), TOKEN_ERROR_STR, 300000, PARAM_PLACEHOLDER),
    TOKEN_NOT_EFFECTIVE(HttpStatus.BAD_REQUEST.value(), TOKEN_NOT_EFFECTIVE_STR, 300001, PARAM_PLACEHOLDER),
    TOKEN_IS_EXPIRED(HttpStatus.BAD_REQUEST.value(), TOKEN_IS_EXPIRED_STR, 300002, PARAM_PLACEHOLDER),
    /**
     * 保留错误码
     */
    UNKNOWN_ERROR(HttpStatus.INTERNAL_SERVER_ERROR.value(), UNKNOWN_ERROR_STR, 900000, PARAM_PLACEHOLDER);
    private int status;
    private String reason;
    private int code;
    private String message;

    public int getStatus() {
        return status;
    }

    public String getReason() {
        return reason;
    }

    public int getCode() {
        return code;
    }

    public String getMessage() {
        return message;
    }

    BlogExceptionEnum(int status, String reason, int code, String message) {
        this.status = status;
        this.reason = reason;
        this.code = code;
        this.message = message;
    }
}

